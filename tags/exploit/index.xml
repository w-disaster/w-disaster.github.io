<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exploit on w-disaster blog</title>
    <link>https://w-disaster.github.io/tags/exploit/</link>
    <description>Recent content in exploit on w-disaster blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 07 Apr 2022 22:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://w-disaster.github.io/tags/exploit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Crypto - ECB oracle</title>
      <link>https://w-disaster.github.io/ecb-oracle/</link>
      <pubDate>Thu, 07 Apr 2022 22:00:00 +0200</pubDate>
      
      <guid>https://w-disaster.github.io/ecb-oracle/</guid>
      <description>Description This challenge has been taken from http://aes.cryptohack.org/ecb_oracle/. What we have is an function that concats the FLAG to a plaintext given as parameter and encrypts it through EAS in ECB mode.
Here&amp;rsquo;s chall.py:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #!/usr/bin/python3 from flag import FLAG from Crypto.Cipher import AES from Crypto.</description>
    </item>
    
    <item>
      <title>Crypto - Password as keys</title>
      <link>https://w-disaster.github.io/password-as-keys/</link>
      <pubDate>Thu, 07 Apr 2022 20:57:00 +0200</pubDate>
      
      <guid>https://w-disaster.github.io/password-as-keys/</guid>
      <description>Description This challenge has been taken from http://aes.cryptohack.org/passwords_as_keys/. The FLAG has been encoded with the AES cipher in ECB mode using as key an hash of a predictable word (a bad password).
The website gives us an API through which we can get the encoded flag and it&amp;rsquo;s also shown where the word has been drawn. Here&amp;rsquo;s the code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  from Crypto.</description>
    </item>
    
    <item>
      <title>Crypto - Lazy CBC</title>
      <link>https://w-disaster.github.io/crypto-lazy-cbc/</link>
      <pubDate>Wed, 06 Apr 2022 10:13:11 +0200</pubDate>
      
      <guid>https://w-disaster.github.io/crypto-lazy-cbc/</guid>
      <description>Description A bad implementation of the AES in CBC mode choosed the key as the IV (Initialization Vector) parameter, since it was considered not important to reach the scope.
What we have is a python script which encodes every string you insert from stdin and the goal is to find the key e.i. the flag.
Exploit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #!</description>
    </item>
    
  </channel>
</rss>