<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cbc on w-disaster blog</title>
    <link>https://w-disaster.github.io/tags/cbc/</link>
    <description>Recent content in cbc on w-disaster blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 06 Apr 2022 10:13:11 +0200</lastBuildDate>
    
	<atom:link href="https://w-disaster.github.io/tags/cbc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Crypto - Lazy CBC</title>
      <link>https://w-disaster.github.io/crypto-lazy-cbc/</link>
      <pubDate>Wed, 06 Apr 2022 10:13:11 +0200</pubDate>
      
      <guid>https://w-disaster.github.io/crypto-lazy-cbc/</guid>
      <description>Description A bad implementation of the AES in CBC mode choosed the key as the IV (Initialization Vector) parameter, since it was considered not important to reach the scope.
What we have is a python script which encodes every string you insert from stdin and the goal is to find the key e.i. the flag.
Exploit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #!</description>
    </item>
    
  </channel>
</rss>