<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - w-disaster blog</title>
        <link>https://w-disaster.github.io/posts/</link>
        <description>All Posts | w-disaster blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 24 Oct 2023 16:15:19 &#43;0200</lastBuildDate><atom:link href="https://w-disaster.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Structure and randomness in prime numbers</title>
    <link>https://w-disaster.github.io/saripn/</link>
    <pubDate>Tue, 24 Oct 2023 16:15:19 &#43;0200</pubDate>
    <author>w-disaster</author>
    <guid>https://w-disaster.github.io/saripn/</guid>
    <description><![CDATA[These are notes I took while listening to Terence Tao's lecture on YouTube titled Structure and randomness in prime numbers. Most of the topics were taken and paraphrased from his slides, but I added some of his additional comments he made during the lecture.
There are many other sources where these topics are treated more clearly; however, this post is intended to help me memorize the material. I'm very excited by the fact that these materials are freely available on the web, and I believe they are one of the main reasons why the internet should exist.]]></description>
</item>
<item>
    <title>ROP - Write4</title>
    <link>https://w-disaster.github.io/write4/</link>
    <pubDate>Sat, 14 May 2022 11:00:00 &#43;0200</pubDate>
    <author>w-disaster</author>
    <guid>https://w-disaster.github.io/write4/</guid>
    <description><![CDATA[Description This challenge has been taken from https://ropemporium.com/challenge/write4.html. This time the string cat flag.txt is not contained in the binary. We&rsquo;re given a couple of hints:
 there&rsquo;s a function print_file() which takes the filename string as the first argument; we need to search for a gadget which stores a value into the memory such as mov [reg], reg.  Explore the binary Download the challenge:
1 2  curl --output split.]]></description>
</item>
<item>
    <title>ROP - Split</title>
    <link>https://w-disaster.github.io/split/</link>
    <pubDate>Fri, 13 May 2022 21:13:00 &#43;0200</pubDate>
    <author>w-disaster</author>
    <guid>https://w-disaster.github.io/split/</guid>
    <description><![CDATA[Description This challenge has been taken from https://ropemporium.com/challenge/split.html. The purpose is to call the system() function with /bin/cat flag.txt as parameter. We also know that this string is contained in a section inside our binary. More information in the linked website.
How to build the ROP chain Download the challenge:
1 2  $ curl --output split.zip https://ropemporium.com/binary/split.zip $ unzip split.zip &amp;&amp; rm split.zip   Since the string is contained in the executable, let&rsquo;s start using rabin2 to locate it:]]></description>
</item>
<item>
    <title>ROP - Callme</title>
    <link>https://w-disaster.github.io/callme/</link>
    <pubDate>Thu, 12 May 2022 17:02:00 &#43;0200</pubDate>
    <author>w-disaster</author>
    <guid>https://w-disaster.github.io/callme/</guid>
    <description><![CDATA[Description This challenge has been taken from https://ropemporium.com/challenge/callme.html. The purpose is to change the flow of execution such that the functions callme_one, callme_two, and callme_three are called in sequence with 0xdeadbeefdeadbeef, 0xcafebabecafebabe, and 0xd00df00dd00df00d as parameters for each of them. More information in the linked website.
How to build the ROP chain Download the challenge:
1 2  $ curl --output callme.zip https://ropemporium.com/binary/callme.zip $ unzip callme.zip &amp;&amp; rm callme.zip   First, let&rsquo;s see the function written by the programmer:]]></description>
</item>
<item>
    <title>Crypto - ECB oracle</title>
    <link>https://w-disaster.github.io/ecb_oracle/</link>
    <pubDate>Thu, 07 Apr 2022 22:00:00 &#43;0200</pubDate>
    <author>w-disaster</author>
    <guid>https://w-disaster.github.io/ecb_oracle/</guid>
    <description><![CDATA[Description This challenge has been taken from http://aes.cryptohack.org/ecb_oracle/. What we have is an function that concats the FLAG to a plaintext given as parameter and encrypts it through EAS in ECB mode.
Here&rsquo;s chall.py:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #!/usr/bin/python3 from flag import FLAG from Crypto.Cipher import AES from Crypto.]]></description>
</item>
<item>
    <title>Crypto - Password as keys</title>
    <link>https://w-disaster.github.io/password-as-keys/</link>
    <pubDate>Thu, 07 Apr 2022 20:57:00 &#43;0200</pubDate>
    <author>w-disaster</author>
    <guid>https://w-disaster.github.io/password-as-keys/</guid>
    <description><![CDATA[Description This challenge has been taken from http://aes.cryptohack.org/passwords_as_keys/. The FLAG has been encoded with the AES cipher in ECB mode using as key an hash of a predictable word (a bad password).
The website gives us an API through which we can get the encoded flag and it&rsquo;s also shown where the word has been drawn. Here&rsquo;s the code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  from Crypto.]]></description>
</item>
<item>
    <title>Crypto - Lazy CBC</title>
    <link>https://w-disaster.github.io/crypto_lazy_cbc/</link>
    <pubDate>Wed, 06 Apr 2022 10:13:11 &#43;0200</pubDate>
    <author>w-disaster</author>
    <guid>https://w-disaster.github.io/crypto_lazy_cbc/</guid>
    <description><![CDATA[Description A bad implementation of the AES in CBC mode choosed the key as the IV (Initialization Vector) parameter, since it was considered not important to reach the scope.
What we have is a python script which encodes every string you insert from stdin and the goal is to find the key e.i. the flag.
Exploit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #!]]></description>
</item>
</channel>
</rss>
